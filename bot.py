import gspread
from oauth2client.service_account import ServiceAccountCredentials
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
client = gspread.authorize(creds)
sheet = client.open_by_key("1vF5i6dw0vgViAltPWMEUkqacc4sYi8mOLmZibaUh2JI").sheet1

# –í—Å–µ —ç—Ç–∞–ø—ã –¥–æ—Å—Ç–∞–≤–∫–∏
all_statuses = [
    "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ —É Whoop",
    "–í –ø—É—Ç–∏ –Ω–∞ —Ç—Ä–∞–Ω–∑–∏—Ç–Ω—ã–π —Å–∫–ª–∞–¥",
    "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ú–æ—Å–∫–≤—É",
    "–ù–∞ —Å–∫–ª–∞–¥–µ –≤ –ú–æ—Å–∫–≤–µ",
    "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É",
    "–ü–æ–ª—É—á–µ–Ω –∫–ª–∏–µ–Ω—Ç–æ–º"
]

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: B44497297), –∏ —è –ø–æ–∫–∞–∂—É –µ–≥–æ —Å—Ç–∞—Ç—É—Å."
    )

# /track <–Ω–æ–º–µ—Ä>
async def track(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.args:
        order_number = context.args[0].strip()
        await respond_with_status(update, order_number)
    else:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /track")

# –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    order_number = update.message.text.strip()
    await respond_with_status(update, order_number)

# –ª–æ–≥–∏–∫–∞ –æ—Ç–≤–µ—Ç–∞
async def respond_with_status(update: Update, order_number: str):
    data = sheet.get_all_records()

    for row in data:
        normalized_row = {k.strip().lower(): v for k, v in row.items()}
        if str(normalized_row.get("–Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ whoop", "")).strip() == order_number:
            status = str(normalized_row.get("—Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞", "–ù–µ —É–∫–∞–∑–∞–Ω")).strip()

            if status in all_statuses:
                index = all_statuses.index(status)
                status_lines = [f"üì¶ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ *{order_number}*:\n"]

                for i, step in enumerate(all_statuses):
                    safe_step = (
                        step.replace("-", "\\-")
                        .replace(".", "\\.")
                        .replace("(", "\\(")
                        .replace(")", "\\)")
                        .replace(",", "\\,")
                    )
                    if i < index:
                        status_lines.append(f"‚úÖ {i+1}\\. {safe_step}")
                    elif i == index:
                        status_lines.append(f"*{i+1}\\. {safe_step}* ‚Üê —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å")
                    else:
                        status_lines.append(f"{i+1}\\. {safe_step}")

                await update.message.reply_text(
                    "\n".join(status_lines), parse_mode="MarkdownV2"
                )
            else:
                safe_status = status.replace("-", "\\-").replace(".", "\\.").replace("(", "\\(").replace(")", "\\)").replace(",", "\\,")
                await update.message.reply_text(
                    f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ *{order_number}*: {safe_status}", parse_mode="MarkdownV2"
                )
            return

    await update.message.reply_text("–¢–∞–∫–æ–π –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
app = ApplicationBuilder().token("8179328604:AAG1v3PRL-V7vcO_x3heyNhiHrJl3eGQ77A").build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("track", track))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
app.run_polling()